VISUAL ASSIST -> 한달 정도 무료, 1년에 10만원 정도 -> 나중에 프로그램이 복잡해지면 이리저리 빠르게 넘어갈 수 있다거나 굉장히 유용한 기능들이 많아서 이용하는 것을 권장 (필수는 아님.)
-> Ctrl + Shift + R를 눌러서 해당 변수가 어디에서 쓰이고 있는지 알 수 있음.

언리얼 사양 낮추는 법
https://blog.naver.com/4roring/221000186202

C++ 컴파일 단계
https://modoocode.com/319

실행 -> F5 or Ctrl + F5
빌드 -> Ctrl + Shift + B
복제 -> Ctrl + D
연이어 선택 -> Alt 누르고 마우스 드래그
주석 달기 -> Ctrl + K, Ctrl + C
주석 해제 -> Ctrl + K, Ctrl + U
북마크 추가/제거 (Toggle Bookmark): Ctrl + K, Ctrl + K
다음 북마크로 이동 (Next Bookmark): Ctrl + K, Ctrl + N
이전 북마크로 이동 (Previous Bookmark): Ctrl + K, Ctrl + P
모든 북마크 정리 (Clear All Bookmarks): Ctrl + K, Ctrl + L
북마크 창 열기 (Bookmark Window): Ctrl + K, Ctrl + W
디버깅 설정 : F9 (그냥 마우스로 누르는 게 더 간편)
디버깅 시 한줄 씩 파고들기(함수 안에 까지 들어감.) : F11
디버깅 시 한줄 씩 파고들기(함수 안까지 안 들어가고 현재 레벨 유지): F10 (같은 층에서만 놈)
디버깅 시 조건을 달아줄 수 있음(ex. HP가 0일때만 멈추고 싶어!!) -> 디버깅(빨간 점?)에다가 우클릭을 하고 조건 누르기 (많이 쓰임!!!)
디버깅 시 어느 함수에서 호출해서 이 함수가 실행되고 있는지 아는 것이 중요!! -> 호출 스택으로 가서 파악하기!!! (중요!!) -> 이걸 통해 전체 흐름 구조를 파악 가능!!
디버깅 중에 변수에 마우스를 가져다 되면 수치가 뜸.

구현부 만들기 -> Ctrl + . (헤더 파일에서도 가능)
해당 함수로 타서 들어가기 -> F12

(원하는 부분 선택하고) 한번에 다 접어서 보기 :  Ctrl + M + O

오류는 오류 목록을 통해 보기 (출력 왼쪽에 누르면 됨.)

새 세로 문서 그룹을 통해서 반 나눌수 있음.  -> 원하는 파일에 우클릭 하면 보임.

전체 저장 : Ctrl + Shift + S
전체 찾기: Ctrl + Shift + F
전체 바꾸기: Ctrl + Shift + H

새로운 프로젝트 만들기 -> 솔루션에서 추가해주면 됨

실행될 프로젝트 설정 -> 원하는 프로젝트에다가 우클릭하고 시작 프로젝트로 설정 누르기(A), 또는 솔루션에서 우클릭해서 속성에 들어간 뒤에 설정도 가능.
(동시 실행도 가능)

------
블루프린트 단축키
새로운 레벨 만들기 : Ctrl + N
이동: 우클릭 + W/A/S/D
위아래로 이동 : 우클릭 + Q/E
(땅 위에 있을 때) 땅에 위치시키기 : end
(멀리있을 때) 원하는 것을 클릭 후 가까이 보기 : F
(게임 플레이시) 카메라 입장이 아닌 영화감독 입장으로 보기 : F8 (복구도 F8로 )
주석달기 : 원하는 부분 드래그하고 C 누르기
선 정리: 선 더블 클릭한 뒤에 Ctrl누른 채로 드래그
연결 끊기 : Alt + 왼 클릭
안 끊고 옮기고 싶으면? : Ctrl + 왼 클릭
선 높이 일직선으로 맞추기 (여러개) : 드래그 후 Q 클릭
Get : Ctrl + 마우스 드래그 해서 변수 가져오기
Set : Alt + 마우스 드래그 해서 변수 가져오기  
분기문(branch): B + 왼쪽 마우스 클릭
시퀀스(sequence): S + 왼쪽 마우스 클릭
복제 : Ctrl + D
디버깅 위치 선정: F9
디버깅 시 한줄 씩 파고들기(함수 안에 까지 들어감.) : F11
디버깅 시 한줄 씩 파고들기(함수 안까지 안 들어가고 현재 레벨 유지): F10 (같은 층에서만 놈)
BluePrint Debugger -> Call Stack을 통해 호출 스택 파악 가능.
머태리얼 쪽 part 단축키 숫자를 자주 씀. (숫자에 따라 float 수가 다름. (정수는 없음.))

__________
언리얼 + C++

1).sin을 키고 시작을 눌러서 하는 방식(비주얼 스튜디오로 실행을 하는 방식임.) -> 매번 끄고 키도 하는 것이 번거롭지만, 안전성이 있다. 또한 디버깅이 쉽게 가능하다는 장점이 있다. 
2)바로 언리얼을 키고 하는 경우 (에디터를 따로 키는 방식임) -> C++을 수정하고 빌드를 하면 오류가 발생하므로 단축키 Ctrl + Alt + F11을 눌러 라이브 코딩이라는 것을 실행해주고, 라이브 코딩 성공이 뜨면 실행 가능. (껏다 켰다 할 필요가 없다는 점이 장점이지만 요상한 일이 발생할 수 있음.) (간단한거 할 때만 쓰는 것을 권장.)
1)과 2)의 차이점이 또 있음 -> C++ 파일 만들 때
