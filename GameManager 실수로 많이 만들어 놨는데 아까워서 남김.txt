백에서 사용자가 보유한 모든 유물들을 가지고 있을 것이며, 이걸 전부 다 보내주는 역할을 할 것이다. 어디서? 인벤토리에서
그럼 그 모든 정보를 저장하는 것을 해주면 된다. -> 형규 파트

내가 해야 될 것은 가챠 유물 정보를 보내주면 내 데이터 시트에서 찾아가지고 보여주면 된다. 이게 끝인데.........


--------

using System;
using System.Collections;
using System.Collections.Generic;
using Data;
using Unity.VisualScripting;
using UnityEngine;
using static Define;

// 게임 자체에서 사용할 전역으로 관리하면 좋은 데이터들 관리

[Serializable]
public class StageClearInfo
{
    public int StageId = 1;
    public int MaxDifficulty = 0;
    public int SelectedDifficulty = 0;
}


[Serializable]
// 계정에 관한 모든 정보
public class GameData
{
    
    public string UserName = "우주최강귀요미박설연";

    public string accessToken = "";
    public string refreshToken = "";
    
    public int Ticket = 0;

    // 유저가 현재 선택한 스테이지 정보
    public StageData CurrentSelectStage = new StageData();
    
    // 유저가 깬 각 스테이지별 난이도 정보
    public Dictionary<int, StageClearInfo> DicStageClearInfo = new Dictionary<int, StageClearInfo>();

    // 유저가 보유한 유물들 -> 이걸 리스트로 관리하는 것이 맞을까? 도감인데?? -> 랜덤성으로 넣기 위해?
    // Todo 이것도 내 파트가 아님...
    public List<Relic> OwnedRelics = new List<Relic>();
}

public class GameManager
{
    #region GameData
    public GameData _gameData = new GameData();

    // Todo (내 파트 아님) 소유하고 있는 유물들.
    public List<Relic> OwnedRelics
    {
        get { return _gameData.OwnedRelics; }

        set
        {
            _gameData.OwnedRelics = value;
        }
    }
    
    // Todo 장착된 유물들.
    
    public int Ticket
    {
        get { return _gameData.Ticket; }
        set 
        { 
            _gameData.Ticket = value;
            // SaveGame();
            OnResourcesChanged?.Invoke();
        }
    }
    
    public string AccessToken
    {
        get { return _gameData.accessToken; }
        set
        {
            _gameData.accessToken = value;
        }
    }
    
    public string RefreshToken
    {
        get { return _gameData.refreshToken; }
        set
        {
            _gameData.refreshToken = value;
        }
    }
    
    public StageData CurrentSelectStage
    {
        get { return _gameData.CurrentSelectStage; }
        set { _gameData.CurrentSelectStage = value; }
    }

    public Dictionary<int, StageClearInfo> DicStageClearInfo
    {
        get { return _gameData.DicStageClearInfo; }
        set
        {
            _gameData.DicStageClearInfo = value;
            // SaveGame();
        }
    }
    
    #endregion
    
    #region Player
    public PlayerController Player { get; set; }
    private Vector2 _moveDir;
    public Vector2 MoveDir
    {
        get { return _moveDir; }
        set
        {
            _moveDir = value;
            OnMoveDirChanged?.Invoke(value);
        }
    }

    private EJoystickState _joystickState;

    public EJoystickState JoystickState
    {
        get { return _joystickState; }
        set
        {
            _joystickState = value;
            OnJoystickStateChanged?.Invoke(_joystickState);
        }
    }

    #endregion
    
    #region Action

    public event Action<Vector2> OnMoveDirChanged;
    public event Action<EJoystickState> OnJoystickStateChanged;
    public event Action OnResourcesChanged;
    public event Action RelicInfoChanged;
    
    #endregion

    #region Relic

    // 장착 유물 세팅 -> 어디까지가 백의 영역인지 모르겠음.
    public void SetBaseRelic()
    {
        // 초기 아이템 설정
        Relic relic1 = new Relic(RELIC1_DEFAULT_ID);
        Relic relic2 = new Relic(RELIC2_DEFAULT_ID);
        Relic relic3 = new Relic(RELIC3_DEFAULT_ID);
        Relic relic4 = new Relic(RELIC4_DEFAULT_ID);
        Relic relic5 = new Relic(RELIC5_DEFAULT_ID);
        Relic relic6 = new Relic(RELIC6_DEFAULT_ID);

        // 가지고 시작
        OwnedRelics = new List<Relic>
        {
            relic1,
            relic2,
            relic3,
            relic4,
            relic5,
            relic6,
        };
        
        // 장착도 하고 시작
    }
    
    // 유물 장착 관련 함수

    // 유물 장착 해제 관련 함수
    
    // Todo 유물 추가 함수 -> (백이 보내준 것을 토대로 추가)
    public Relic AddRelic(int key)
    {
        // 장착 안했을때의 유물 키랑 일치하면 리턴
        if (key == 0)
            return null;

        Relic rlc = new Relic(key);
        OwnedRelics.Add(rlc);
        RelicInfoChanged?.Invoke();

        return rlc;
    }

    #endregion
    
    // 유물 정렬 관련 함수
    
    // 초기 세팅
    public void Init()
    {
        // 현재 유저가 선택한 스테이지 정보 (나중에 유저 정보 값으로 바꿔주기!!!)
        CurrentSelectStage = Managers.Data.StageDic[1];
        
        // 스테이지 수에 맞게 각 스테이지 별 난이도 클리어 정보 Add하기
        foreach (StageData stageData in Managers.Data.StageDic.Values)
        {
            StageClearInfo info = new StageClearInfo
            {
                StageId = stageData.StageId,
                MaxDifficulty = 10, // test를 위해
                SelectedDifficulty = 11, // test를 위해
            };
            _gameData.DicStageClearInfo.Add(stageData.StageId, info);
        }
    }
    
}
