1. 게임 서버의 종류와 특징
-  실시간 통신(상호작용) 여부 o(동기적으로 서버 구현) -> Stateful 통신(연결을 하고 close를 하기 전 까지 계속 연결)을 이용한 게임 서버 제작
	- TCP(데이터 전송 보장)/UDP(데이터 손실 될 수 있음)를 이용한 소켓 통신 / RPC 사용
	- 단, 재화 상점 아이템 구매 등 단순한 저장 데이터의 경우 웹 서버/WAS에서 분산 처리
	- Stateful 특징 ->Client와 1:1로 연결이 되어 있어야 한다(양방향 통신)(한 쪽이 끊기 전까지 데이터 왔다갔다 가능)
	- Client가 서버에 행동을 요청하고 그 결과를 처리한 뒤, 접속되어 있는 모든 Client에게 데이터를 보내줌(데이터 동기화(Broadcast)(중요!!))
	- 수평적 확장이 어렵고(연결된 소켓때문) 수직적 확장으로 서비스를 운영하는 경우가 많음
	- 수평적 확장을 하기 위해서는 각각의 게임 서버를 관리하는 또다른 서버를 구성해야 함
	- 이렇게 서버가 클라이언트끼리 나누어져 있는데 나누어졌다고 서로 통신 불가능 한 건 아님 (경매장 서버 이용)


-실시간 통신이 필요하지 않는 경우(비동기적으로 서버 구현)
	- Stateless(연결을 하고 데이터를 보내고 난 뒤에 close가 되어버림) 통신을 이용한 게임 서버 제작
	- Http를 이용한 웹 서버/ WAS(Web Application Server)로 제작
	채팅 등의 간단한 소통은 WebSocket을 이용해서 통신 가능(양방향 통신임)
	- Stateless 특징 -> 플레이어와 서버가 단 방향 통신으로 이루어짐

2. 포톤 클라우드와 통신 방식
- Room 기반의 서버 아키텍쳐(소규모 인원이 한 방에서 진행하는 게임들에 적합)
-photonView를 이용한 동기화
	- 게임 안의 Object 중 움직임이나 회전 등 실시간으로 동기화가 필요한 경우 사용
	- Observer Pattern으로 설계되어 있음
	- 동기화를 하고 싶은 물체에 PhotonView를 붙이는 것만으로 손쉽게 동기화가 가능하지만 네트워크 부화가 많을 수 있으므로 반드시 필요한 경우만 적용
- RPC를 이용한 동기화(local)
	- 모든 것을 동기화 할 수는 없어서 나옴
	- 함수를 네트워크를 통해 각각 1회씩 호출
	- 함수 실행이 Client에서 행해짐으로(프레임?) 서버의 연산 비용을 줄이고 Local 환경에서 직접 동기화
	- 단, 코드 로직이 Client 안에 있으므로 보안에 상당히 취약함
	- 게임 안의 Object에게 그 객체의 특정 함수를 직접 실행하도록 요청
	- 단 한번의 호출로 Local 상에서 Client의 움직임을 동기화 하는 기능
	- 각각의 Client 상에서 로직이 발생하므로 네트워크 통신은 더 이상 발생 x

3. 소켓 프로그래밍의 이해
- 소켓의 정의
	- 소켓은 네트워크 상에서 돌아가는 두 개의 프로그램(클라이언트 - 서버)간의 접속점
	- IP와 Port의 조합으로 이루어진 엔드 포인트를 바탕으로 연결됨
	- 클라이언트 측의 소켓 연결 요청(Connect)과 서버 측의 소켓 연결 수락(Accept)이 이루어지면 데이터를 양방향으로 주고 받을 수 있음
- 소켓 통신의 특징
	- 패킷이라는 형식화된 데이터 메모리 단위를 주고 받아 통신함
	- Client와 Server가 특정 port를 열어서 실시간으로 양방향 통신을 하는 방식
	- Stateful Protocol - server가 클라이언트의 상태를 저장하고 있음
	(임의로 연결 상태를 끊지 않는 한 서로 연결 유지)
	- DB를 통해 데이터를 주고 받을 수도 있고, 임시로 데이터를 서버 프로그램 자체 내에서 생성해서 가지고 있을 수도 있음

- Packet Data의 정의
	- 연결된 클라이언트와 서버가 통신을 주고 받기 위한 일종의 데이터 규약
	- 패킷의 공통 헤더와 담을 메시지를 버퍼를 이용해서 확장성 있게 구현 가능
	- 클라이언트가 보낸 패킷을 서버는 공통 헤더를 통해 얼마만큼 버퍼를 파싱할 지를 결정
	- 파싱된 데이터를 통해 클라이언트가 원하는 정보를 서버에게 다시 패킷 데이터로 만들어서 보냄


4. 간략한 PvP 서버 동작 예시
- 싱글 스레드
- 멀티 스레드 시 데이터 동기화 필수!!!

디렉토리 구조
피그마
강의 깔짝